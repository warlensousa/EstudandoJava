package Arrays_Vetores;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;


public class ArraysVetores {
    public static void main(String[] args) {
        
        // ! Arrays => Um array Ã© uma estrutura de dados em Java que armazena mÃºltiplos elementos do mesmo tipo em posiÃ§Ãµes consecutivas de memÃ³ria.

                // ! CaracterÃ­sticas do Array;
        // âœ… Tamanho fixo: O tamanho do array deve ser definido na criaÃ§Ã£o e nÃ£o pode ser alterado.
        // âœ… Elementos homogÃªneos: Todos os elementos devem ser do mesmo tipo.
        // âœ… Acesso direto pelo Ã­ndice: Permite acesso rÃ¡pido aos elementos atravÃ©s de Ã­ndices numÃ©ricos.


        // DeclaraÃ§Ãµes de Array;

        // Array vazia;
        String[] anime = new String[]{}; 

        // Um array de 5 posiÃ§Ãµes, inicializado com 0
        int[] numerosInt = new int[5]; 
        System.out.println(Arrays.toString(numerosInt));

        // Array com valores predefinidos
        String[] nomes = {"Gabriel", "Kaique", "Kratos", "Isagi"};
        System.out.println(Arrays.toString(nomes));

        // Copiar um Array, podendo ajustar seu tamanho;
        String[] copiaArrayNomes = Arrays.copyOf(nomes, 6); // (Array que vai ser copiado, elementos que vai ser copiado) obs: se colocar mais elementos que o array que estÃ¡ sendo copiado tem... os que nÃ£o tem no array original vai ter valor de 0 (int) ou null (String);
        System.out.println(Arrays.toString(copiaArrayNomes));


        // arrays.sort(array) => colocar em ordem crescente;
        // arrays.equals(array) => compara se os arrays sÃ£o iguais em conteÃºdo e ordem;
        // Arrays.deepToString => imprimir arrays multidimencionais;


        // ! ArrayList => Ã© uma classe da Java Collections Framework que implementa uma lista dinÃ¢mica, permitindo redimensionamento automÃ¡tico e diversas operaÃ§Ãµes prÃ¡ticas.

                // ! CaracterÃ­sticas do ArrayList;
        // âœ… Tamanho dinÃ¢mico: Expande e reduz conforme a necessidade.
        // âœ… Elementos homogÃªneos: Apenas um tipo de dado (usando Generics).
        // âœ… Permite elementos duplicados.
        // âœ… Usa Ã­ndice para acesso rÃ¡pido.
        // âœ… Mais flexÃ­vel que arrays convencionais.

        // Declarando e Inicializando um ArrayList vazia;
        ArrayList<String> times = new ArrayList<>();  

        // Adicionar itens => times.add("Barcelona");
        // Acessando elementos atravÃ©s do index => times.get(0);
        // Modificando elementos atravÃ©s do index => times.set(0, "Real Madrid")
        // Removendo elementos atrÃ¡veis do index ou nome do elemento => times.remove(0)
        
        // times.size(); // Retorna o tamanho da lista
        // times.contains("Barcelona"); // Verifica se "Ana" estÃ¡ na lista (true/false)
        // times("Barcelona"); // Retorna o Ã­ndice de "Beatriz"
        // times.clear(); // Remove todos os elementos
        // times.isEmpty(); // Verifica se a lista estÃ¡ vazia (true/false)


        // ! Quando Usar Cada Um?
        // âœ” Use Arrays quando: O tamanho Ã© fixo, a performance Ã© crucial e nÃ£o precisa de muitas operaÃ§Ãµes de adiÃ§Ã£o/remoÃ§Ã£o de elementos.

        // âœ” Use ArrayList quando: O tamanho pode variar e vocÃª precisa de mÃ©todos para manipulaÃ§Ã£o dos dados facilmente.


        // ! List => A interface List faz parte do Java Collections Framework (JCF) e representa uma coleÃ§Ã£o ordenada de elementos;
        // âœ… Aceita elementos duplicados
        // âœ… MantÃ©m a ordem de inserÃ§Ã£o
        // âœ… Permite acesso por Ã­ndice

        // ! ğŸ“Œ A List Ã© uma interface, entÃ£o nÃ£o pode ser instanciada diretamente. Para utilizÃ¡-la, precisamos de uma classe concreta como ArrayList, LinkedList, Vector ou Stack.

        // ! ğŸ”¹ O ideal Ã© declarar como List e instanciar com a implementaÃ§Ã£o desejada, para facilitar futuras alteraÃ§Ãµes.

        // DeclaraÃ§Ã£o de uma List
        List<String> pokemon = new ArrayList<>();
                
        // ğŸ“Œ Use ArrayList para acesso rÃ¡pido aos elementos.
        // ğŸ“Œ Use LinkedList para inserÃ§Ãµes/remoÃ§Ãµes frequentes.
        // ğŸ“Œ Use Vector para aplicaÃ§Ãµes multithread.
        // ğŸ“Œ Use Stack para estruturas de pilha (LIFO).




        


        
    }
}
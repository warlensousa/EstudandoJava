package La√ßosDeRepeti√ß√£o;

public class LacosRepeticao {
    public static void main(String[] args) {
        
        // ! La√ßos de Repeti√ß√£o => Os la√ßos de repeti√ß√£o (ou loops) s√£o estruturas fundamentais na programa√ß√£o, permitindo executar um bloco de c√≥digo m√∫ltiplas vezes com base em uma condi√ß√£o;

        // !  ‚úî   QUANDO USAR:
        // ‚úî Quando precisar repetir um bloco de c√≥digo v√°rias vezes.
        // ‚úî Quando for percorrer arrays, listas e cole√ß√µes.
        // ‚úî Quando precisar aguardar uma condi√ß√£o ser verdadeira (while).
        // ‚úî Quando precisar garantir ao menos uma execu√ß√£o (do-while).

        // !  ‚ùå  QUANDO EVITAR: 
        // üö´ Loops infinitos sem necessidade (while (true) {} pode travar o programa).
        // üö´ Quando h√° formas mais eficientes (exemplo: usar Stream API em cole√ß√µes).
        // üö´ Quando h√° risco de OutOfMemoryError (como adicionar elementos sem parar).
        // üö´ N√£o alterar a cole√ß√£o dentro do for-each ‚Äì Use Iterator ou ListIterator.
        // üö´ Usar a estrutura mais adequada ‚Äì N√£o use for onde while ou for-each seria melhor.
        // üö´ Evitar complexidade desnecess√°ria ‚Äì Loops aninhados aumentam o custo computacional.

        // !   ‚ñ∂Ô∏é CONCLUS√ÉO:
        // üçÄ O for √© √≥timo para loops com contador.
        // üçÄ O while √© ideal para repeti√ß√µes baseadas em condi√ß√£o.
        // üçÄ O do-while garante que o c√≥digo rode pelo menos uma vez.
        // üçÄ O for-each facilita a itera√ß√£o sobre cole√ß√µes.
        // üçÄ break e continue ajudam no controle do fluxo do loop.



        // break ‚Äì Interrompe o Loop
        // continue ‚Äì Pula uma Itera√ß√£o (Ignora o c√≥dico abaixo e volta para o come√ßo)


        // ! 1. For => O loop 'for' √© ideal quando sabemos exatamente quantas vezes queremos executar um bloco de c√≥digo.

        // Exemplo conta  1 at√© 10;
        for(int i = 1; i <= 10; i++) {
            System.out.println("n: " + i);
        }

        // Inicializa√ß√£o (int i = 1) ‚Üí Define a vari√°vel do loop.
        // Condi√ß√£o (i <= 10) ‚Üí Enquanto for verdadeira, o bloco ser√° executado.
        // Incremento (i++) ‚Üí Atualiza a vari√°vel a cada itera√ß√£o


        // ! 2. O while √© usado quando n√£o sabemos exatamente quantas vezes um c√≥digo precisa ser executado

        int contagem = 15; // fingir que n√£o sabemos que n√∫mero √© esse;
        int n = 0;

        while (true) {
            if(n == contagem) {
                System.out.println("Contou at√© esse n√∫mero;");
                break;
            }
            n++;
            System.out.println(n);
        }


        // Contar de 5 at√© 0 decrescente;
        int j = 5;
        while (j >= 0) {  // enquanto j for maior ou igual a 0 ele vai continuar;
            System.out.println(j);
            j--;  // decremento -1 a cada loop;
        }

        // Avalia a condi√ß√£o antes da execu√ß√£o.
        // Se a condi√ß√£o for true, o bloco de c√≥digo executa.
        // Se for false, o loop termina


        // ! 3. A diferen√ßa entre do-while e while √© que do-while sempre executa ao menos uma vez, pois a verifica√ß√£o da condi√ß√£o ocorre no final.
        int w = 1;  // Se w j√° come√ßasse com 6, no while o bloco n√£o rodaria, mas no do-while, seria executado pelo menos uma vez.
        do {
            System.out.println("N√∫mero: " + w);
            w++;
        } while (w <= 5);


        // ! 4. for-each => Para interar cole√ß√µes (Arrays, List, Set, Map etc...)
        // Array de Strings;
        String[] animes = {"Pok√©mon", "Naruto", "Dragon ball", "Cavaleiros do Zodiaco"};
        for(String anime : animes) {  // tipo, item da array, array;
            System.out.println(anime);
        }

        // N√£o da acesso ao index do elemento;



    }
}
